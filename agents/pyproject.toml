[project]
name = "magi-decision-system"
version = "0.1.0"
description = "MAGI Decision System - Multi-Agent Decision Making inspired by Evangelion"
authors = [
    {name = "MAGI Development Team"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["ai", "agents", "decision-making", "magi", "evangelion", "strands-agents"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core Strands Agents Framework
    "strands-agents>=0.1.0",
    
    # AgentCore Runtime Integration
    "bedrock-agentcore>=0.1.0",
    "bedrock-agentcore-starter-toolkit>=0.1.0",
    
    # AWS Integration
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    
    # Data Validation and Serialization
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Async Support
    "aiohttp>=3.9.0",
    
    # Logging and Monitoring
    "structlog>=23.2.0",
    "python-json-logger>=2.0.7",
    
    # OpenTelemetry for Observability (optional in Phase 1-2)
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation>=0.42b0",
    "opentelemetry-exporter-otlp>=1.21.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    
    # Development Tools
    "black>=23.12.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "flake8>=6.1.0",
    "ruff>=0.1.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    
    # Optional: For local development and debugging
    "ipython>=8.18.0",
    "jupyter>=1.0.0",
]

aws = [
    # Additional AWS services for production
    "aioboto3>=12.0.0",
    "aws-lambda-powertools>=2.25.0",
]

[project.urls]
Homepage = "https://github.com/your-org/magi-decision-system"
Documentation = "https://your-org.github.io/magi-decision-system"
Repository = "https://github.com/your-org/magi-decision-system.git"
Issues = "https://github.com/your-org/magi-decision-system/issues"

[project.scripts]
magi-demo = "demo:main"
magi-test = "simple_test:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["shared", "solomon", "caspar", "balthasar", "melchior"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["shared", "solomon", "caspar", "balthasar", "melchior"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "strands_agents.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]